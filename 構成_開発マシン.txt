my-java-project/
├── config/
│   └── checkstyle/
│        ├── checkstyle.xml        (Checkstyleのメイン設定ファイル)
│        └── suppressions.xml      (必要ならCheckstyleの抑制ルールを記述)
├── src/
│   ├── main/...
│   └── test/...
├── .editorconfig                  (EditorConfigファイル)
├── pom.xml / build.gradle 等       (ビルド設定ファイル)
└── ...（その他プロジェクトファイル）


your-project/
├── .gitlab/
│   └── merge_request_templates/
│       ├── Default.md      (デフォルトテンプレート)
│       ├── Feature.md      (新機能提案用テンプレート)
│       ├── BugFix.md       (バグ修正用テンプレート)
│       ├── Refactor.md     (リファクタリング用テンプレート)
│       └── DocsUpdate.md   (ドキュメント更新用テンプレート)
# ✅ MRテンプレート: Feature.md
## 🆕 機能概要
<!-- 何を実装したのか簡潔に -->

## 📝 チケット・課題
- Jiraチケット: [PROJ-123](https://your.jira.url/browse/PROJ-123)

## ✅ 実装内容
- [x] 新機能の実装

## 🔍 動作確認手順
1. ローカル起動
2. 動作確認

## 📷 スクリーンショット・ログ（任意）

---
# ✅ MRテンプレート: BugFix.md
## 🐛 修正内容

## 📝 原因

## 🔍 再現手順

## ✅ 修正内容の検証方法

---
# ✅ MRテンプレート: Refactor.md
## 🔧 リファクタリング概要

<!-- このMRでどのようなコード改善を行ったのか記載 -->

例:
- 冗長な処理の整理
- 共通処理の共通メソッド化
- 命名の改善、リーダブルな構造への変更

## 🎯 目的・背景

<!-- なぜリファクタリングを行ったのか、どんな問題を解決したのか -->

## 📋 変更内容

- [x] XXXService のメソッド分割
- [x] 共通ロジックの util クラス化
- [x] コメントと変数名の見直し

## 🔍 動作確認方法

1. リファクタリング後も既存機能が壊れていないことを確認
2. 該当の単体テスト／統合テストがパスすること
3. UIやAPIの動作に変更がないことを目視確認

## ✅ 備考（レビュワーへの補足）

<!-- 特に見てほしい箇所、注意点など -->

---
# ✅ MRテンプレート: DocsUpdate.md
## 📘 ドキュメント更新内容

<!-- どのドキュメントをどのように更新したのか記載 -->

例:
- README.md にセットアップ手順を追加
- API仕様書に `/users` エンドポイントを追加
- ER図を最新構成に差し替え

## 📄 対象ファイル

- [x] README.md
- [x] docs/api-spec.md
- [x] docs/db/schema-v2.drawio

## 📝 変更理由

<!-- なぜこの変更が必要になったのか記載 -->

例: 機能追加に伴い、READMEの内容が古くなったため

## 🔍 確認事項

- [ ] 内容が最新の仕様と一致しているか
- [ ] 誤字脱字がないか
- [ ] 表記の一貫性（用語統一など）

## 📎 補足・参考資料（任意）

<!-- スクリーンショットやリンクなど -->

